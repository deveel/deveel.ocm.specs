{
  "openapi": "3.0.1",
  "info": {
    "title": "Security Management API v1",
    "contact": {
      "name": "Antonello Provenzano",
      "email": "antonello@deveel.com"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://api.ocm.deveel.net"
    }
  ],
  "paths": {
    "/api_client": {
      "post": {
        "tags": [
          "client"
        ],
        "summary": "Creates an API Client",
        "operationId": "createApiClient",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiClientCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The client was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiClient"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the data of the client are invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "404": {
            "description": "The given tenant was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          }
        },
        "security": [
          {
            "oauth2": [
              "create:client"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "client"
        ],
        "summary": "Gets a Page of API Clients",
        "operationId": "getApiClientPage",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A page of clients from the identity manager",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfClientApplication"
                }
              }
            }
          },
          "400": {
            "description": "One or more of parameters are invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          }
        },
        "security": [
          {
            "oauth2": [
              "read:client"
            ]
          }
        ]
      }
    },
    "/api_client/{id}": {
      "get": {
        "tags": [
          "client"
        ],
        "summary": "Gets an API Client",
        "operationId": "getApiClient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The client was found in the identity manager",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiClient"
                }
              }
            }
          },
          "404": {
            "description": "The client or the tenant were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          }
        },
        "security": [
          {
            "oauth2": [
              "read:client"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "client"
        ],
        "summary": "Deletes an API Client",
        "operationId": "deleteApiClient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The client was deleted successfully"
          },
          "404": {
            "description": "The client was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          }
        },
        "security": [
          {
            "oauth2": [
              "delete:client"
            ]
          }
        ]
      }
    },
    "/api_client/{id}/status": {
      "put": {
        "tags": [
          "client"
        ],
        "summary": "Sets the Status of an API Client",
        "operationId": "setApiClientStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewClientStatus"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The status of the client was changed"
          },
          "304": {
            "description": "The status of the client was not chagened"
          },
          "400": {
            "description": "One or more of the request data are invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "404": {
            "description": "Either the tenant or the client were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          }
        },
        "security": [
          {
            "oauth2": [
              "update:client"
            ]
          }
        ]
      }
    },
    "/api_client/{clientId}/keyRotation": {
      "put": {
        "tags": [
          "client"
        ],
        "summary": "Rotate the Key of an API Client",
        "operationId": "rotateApiClientKey",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeyRotationRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The key(s) of the client was changed successfully"
          },
          "400": {
            "description": "One or more of the request data are invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "404": {
            "description": "Either the tenant or the client were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          }
        },
        "security": [
          {
            "oauth2": [
              "update:client"
            ]
          }
        ]
      }
    },
    "/app": {
      "post": {
        "tags": [
          "client"
        ],
        "summary": "Creates a Client",
        "operationId": "createApplication",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientAppCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The client was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientApplication"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the data of the client are invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "404": {
            "description": "The given tenant was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          }
        },
        "security": [
          {
            "oauth2": [
              "create:client"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "client"
        ],
        "summary": "Gets a Page of Clients",
        "operationId": "getApplicationPage",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A page of clients from the identity manager",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageQueryResultOfClientApplication"
                }
              }
            }
          },
          "400": {
            "description": "One or more of parameters are invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          }
        },
        "security": [
          {
            "oauth2": [
              "read:client"
            ]
          }
        ]
      }
    },
    "/app/{id}": {
      "get": {
        "tags": [
          "client"
        ],
        "summary": "Gets a Client",
        "operationId": "getApplication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The client was found in the identity manager",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientApplication"
                }
              }
            }
          },
          "404": {
            "description": "The client or the tenant were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          }
        },
        "security": [
          {
            "oauth2": [
              "read:client"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "client"
        ],
        "summary": "Deletes a Client",
        "operationId": "deleteApplication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The client was deleted successfully"
          },
          "404": {
            "description": "The client was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          }
        },
        "security": [
          {
            "oauth2": [
              "delete:client"
            ]
          }
        ]
      }
    },
    "/app/{id}/status": {
      "put": {
        "tags": [
          "client"
        ],
        "summary": "Sets the Status of a Client",
        "operationId": "setApplicationStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewClientStatus"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The status of the client was changed"
          },
          "304": {
            "description": "The status of the client was not chagened"
          },
          "400": {
            "description": "One or more of the request data are invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "404": {
            "description": "Either the tenant or the client were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          }
        },
        "security": [
          {
            "oauth2": [
              "update:client"
            ]
          }
        ]
      }
    },
    "/role": {
      "get": {
        "tags": [
          "role"
        ],
        "summary": "Get a All of Roles",
        "operationId": "getAllRoles",
        "responses": {
          "200": {
            "description": "The list of the roles is returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          }
        },
        "security": [
          {
            "oauth2": [
              "read:role"
            ]
          }
        ]
      }
    },
    "/role/{id}": {
      "get": {
        "tags": [
          "role"
        ],
        "summary": "Get a Role",
        "operationId": "getRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The given role is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "404": {
            "description": "The role was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          }
        },
        "security": [
          {
            "oauth2": [
              "read:role"
            ]
          }
        ]
      }
    },
    "/role/{id}/grant": {
      "get": {
        "tags": [
          "role"
        ],
        "summary": "Get the Grants of a Role",
        "operationId": "getRoleGrants",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The grant of the role is returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubjectGrant"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubjectGrant"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The role was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          }
        },
        "security": [
          {
            "oauth2": [
              "read:role"
            ]
          }
        ]
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a New User",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "The request contains some invalid elements",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "404": {
            "description": "If the user is associated to a Tenant and this was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "409": {
            "description": "Another user with the same e-mail or the same name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          }
        },
        "security": [
          {
            "oauth2": [
              "create:user"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Gets a Page of Users",
        "operationId": "getUserPage",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A page of users for the tenant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageQueryResultOfUser"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageQueryResultOfUser"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the parameters of the request are invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          }
        },
        "security": [
          {
            "oauth2": [
              "read:user"
            ]
          }
        ]
      }
    },
    "/user/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Gets a User",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user was found in the identity manager",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "The user was not found in the identity manager",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          }
        },
        "security": [
          {
            "oauth2": [
              "read:user"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Deletes a User",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user was successfully deleted"
          },
          "404": {
            "description": "Either the tenant or the user were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          }
        },
        "security": [
          {
            "oauth2": [
              "delete:user"
            ]
          }
        ]
      }
    },
    "/user/me": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Gets the Current User",
        "operationId": "getMe",
        "responses": {
          "200": {
            "description": "The current user was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "The user could not be found in the identity manager",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          }
        },
        "security": [
          {
            "oauth2": [
              "read:user"
            ]
          }
        ]
      }
    },
    "/user/{id}/status": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Sets the Status of a User",
        "operationId": "setUserStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUserStatus"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUserStatus"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewUserStatus"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The status of the user was changed"
          },
          "304": {
            "description": "The status of the user was not chagened"
          },
          "400": {
            "description": "One or more of the request data are invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "404": {
            "description": "Either the tenant or the user were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          }
        },
        "security": [
          {
            "oauth2": [
              "write:tenant",
              "update:user"
            ]
          }
        ]
      }
    },
    "/user/{id}/grant": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Grant Permissions to a User",
        "operationId": "grantUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantAction"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GrantAction"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GrantAction"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The user was successfully assigned with permissions"
          },
          "304": {
            "description": "The user was not assigned with the given permissions"
          },
          "400": {
            "description": "The content of the request is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "404": {
            "description": "Either the tenant or the user were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          }
        },
        "security": [
          {
            "oauth2": [
              "grant:user"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get the Grants of a User",
        "operationId": "getUserGrants",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "At least one grant was found for the given user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubjectGrant"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubjectGrant"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Either the tenant or the user were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            },
            "x-ms-error-response": true
          }
        },
        "security": [
          {
            "oauth2": [
              "read:user"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ApiClient": {
        "required": [
          "active",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the client"
          },
          "active": {
            "type": "boolean",
            "description": "Indicates whether the client is active or not"
          },
          "properties": {
            "type": "object",
            "additionalProperties": { },
            "description": "A set of propoerties of the client",
            "nullable": true
          },
          "id": {
            "minLength": 1,
            "type": "string",
            "description": "The unique identifier of the client"
          },
          "primaryKey": {
            "type": "string",
            "description": "The primary key of the client",
            "nullable": true
          },
          "secondaryKey": {
            "type": "string",
            "description": "The secondary key of the client",
            "nullable": true
          }
        },
        "description": "An application that is identified by API Keys"
      },
      "ApiClientCreationRequest": {
        "required": [
          "client"
        ],
        "type": "object",
        "properties": {
          "client": {
            "$ref": "#/components/schemas/NewApiClient"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "BinaryFilter": {
        "required": [
          "field",
          "op"
        ],
        "type": "object",
        "properties": {
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          },
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "op": {
            "$ref": "#/components/schemas/WebFilterOperator"
          },
          "range": {
            "$ref": "#/components/schemas/Range"
          }
        }
      },
      "ClientAppCreationRequest": {
        "required": [
          "client"
        ],
        "type": "object",
        "properties": {
          "client": {
            "$ref": "#/components/schemas/NewClientApplication"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "ClientApplication": {
        "required": [
          "active",
          "clientId",
          "grantTypes",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the client"
          },
          "active": {
            "type": "boolean",
            "description": "Indicates whether the client is active or not"
          },
          "properties": {
            "type": "object",
            "additionalProperties": { },
            "description": "A set of propoerties of the client",
            "nullable": true
          },
          "id": {
            "minLength": 1,
            "type": "string",
            "description": "The unique identifier of the client"
          },
          "grantTypes": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantType"
            },
            "description": "The allowed grant types provided by the application"
          },
          "consentType": {
            "type": "string",
            "nullable": true
          },
          "clientId": {
            "minLength": 1,
            "type": "string",
            "description": "The OAuth client_id of the application"
          },
          "clientSecret": {
            "type": "string",
            "description": "The OAuth client_secret of the application",
            "nullable": true
          }
        },
        "description": "A client application that implements OAuth processes of identification"
      },
      "ClientKeys": {
        "enum": [
          "primary",
          "secondary",
          "all"
        ],
        "type": "string",
        "description": "Enumerates the type of keys of a client application",
        "x-ms-enum": {
          "name": "ClientKeys",
          "modelAsString": true
        }
      },
      "ContainsFilter": {
        "required": [
          "field",
          "value"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "EndsWithFilter": {
        "required": [
          "field",
          "value"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "EqualFilter": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          },
          "field": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "Filter": {
        "type": "object",
        "properties": {
          "logical": {
            "$ref": "#/components/schemas/LogicalFilter"
          },
          "and": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "nullable": true
          },
          "or": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "nullable": true
          },
          "binary": {
            "$ref": "#/components/schemas/BinaryFilter"
          },
          "eq": {
            "$ref": "#/components/schemas/EqualFilter"
          },
          "ne": {
            "$ref": "#/components/schemas/NotEqualFilter"
          },
          "gt": {
            "$ref": "#/components/schemas/GreaterThanFilter"
          },
          "gte": {
            "$ref": "#/components/schemas/GreaterThanOrEqualFilter"
          },
          "lt": {
            "$ref": "#/components/schemas/LesserThanFilter"
          },
          "lte": {
            "$ref": "#/components/schemas/LesserThanOrEqualFilter"
          },
          "startsWith": {
            "$ref": "#/components/schemas/StartsWithFilter"
          },
          "endsWith": {
            "$ref": "#/components/schemas/EndsWithFilter"
          },
          "contains": {
            "$ref": "#/components/schemas/ContainsFilter"
          },
          "between": {
            "$ref": "#/components/schemas/RangeFilter"
          },
          "not": {
            "$ref": "#/components/schemas/Filter"
          }
        }
      },
      "FilterValue": {
        "type": "object",
        "properties": {
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        }
      },
      "GeoPoint": {
        "required": [
          "lat",
          "lon"
        ],
        "type": "object",
        "properties": {
          "lon": {
            "type": "number",
            "format": "double"
          },
          "lat": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "GrantAction": {
        "required": [
          "actionType",
          "scopes"
        ],
        "type": "object",
        "properties": {
          "actionType": {
            "$ref": "#/components/schemas/GrantActionType"
          },
          "scopes": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GrantActionType": {
        "enum": [
          "grant",
          "revoke"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "GrantActionType",
          "modelAsString": true
        }
      },
      "GrantType": {
        "enum": [
          "client_credentials",
          "authorization_code"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "GrantType",
          "modelAsString": true
        }
      },
      "GreaterThanFilter": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          },
          "field": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "GreaterThanOrEqualFilter": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          },
          "field": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "KeyRotationRequest": {
        "required": [
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/components/schemas/ClientKeys"
          }
        },
        "description": "Describes a request to rotate the keys of a\r\nclient application"
      },
      "LesserThanFilter": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          },
          "field": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "LesserThanOrEqualFilter": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          },
          "field": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "LogicalFilter": {
        "required": [
          "filters",
          "op"
        ],
        "type": "object",
        "properties": {
          "filters": {
            "minItems": 2,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            }
          },
          "op": {
            "$ref": "#/components/schemas/LogicalOperator"
          }
        }
      },
      "LogicalOperator": {
        "enum": [
          "and",
          "or"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "LogicalOperator",
          "modelAsString": true
        }
      },
      "NewApiClient": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "properties": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true
          }
        }
      },
      "NewClientApplication": {
        "required": [
          "grantTypes",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "grantTypes": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantType"
            }
          },
          "properties": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true
          },
          "consentType": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "NewClientStatus": {
        "required": [
          "active"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "notes": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "NewUser": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A unique name of the user (optional)",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the person (optional)",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "The family name of the person (optional)",
            "nullable": true
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "description": "The e-mail address that identifies the user and that is used\r\nfor communications",
            "format": "email"
          },
          "phone": {
            "type": "string",
            "description": "A phone number used to reach the user",
            "format": "tel",
            "nullable": true
          },
          "picture": {
            "type": "string",
            "description": "The link to a profile picture of the user",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": { },
            "description": "Additional metadata of the user",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Whether to set the user active since its creation"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An optional list of roles to be assigned to the user",
            "nullable": true
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An optional list of scopes to be assigned to the user",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "A password used to authenticate the user (if not provided, it is auto-generated)",
            "nullable": true
          }
        },
        "description": "The request of creation of a new user of the platform"
      },
      "NewUserStatus": {
        "required": [
          "active"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "notes": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "NotEqualFilter": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          },
          "field": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "PageQuery": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "PageQueryResultOfClientApplication": {
        "required": [
          "query",
          "totalItems",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "totalItems": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientApplication"
            },
            "nullable": true,
            "readOnly": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "query": {
            "$ref": "#/components/schemas/PageQuery"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "first": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "last": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "PageQueryResultOfUser": {
        "required": [
          "query",
          "totalItems",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "totalItems": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "nullable": true,
            "readOnly": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "query": {
            "$ref": "#/components/schemas/PageQuery"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "first": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "last": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        }
      },
      "PageRequest": {
        "required": [
          "page",
          "size"
        ],
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PageSort"
            },
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "nullable": true
          }
        }
      },
      "PageResultOfClientApplication": {
        "required": [
          "request",
          "totalItems",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "totalItems": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientApplication"
            },
            "nullable": true,
            "readOnly": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "request": {
            "$ref": "#/components/schemas/PageRequest"
          }
        }
      },
      "PageSort": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "direction": {
            "$ref": "#/components/schemas/PageSortDirection"
          },
          "ascending": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "PageSortDirection": {
        "enum": [
          "default",
          "asc",
          "desc"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "PageSortDirection",
          "modelAsString": true
        }
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "Range": {
        "type": "object",
        "properties": {
          "lower": {
            "$ref": "#/components/schemas/FilterValue"
          },
          "upper": {
            "$ref": "#/components/schemas/FilterValue"
          }
        }
      },
      "RangeFilter": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "lower": {
            "$ref": "#/components/schemas/FilterValue"
          },
          "upper": {
            "$ref": "#/components/schemas/FilterValue"
          },
          "field": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "Role": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "StartsWithFilter": {
        "required": [
          "field",
          "value"
        ],
        "type": "object",
        "properties": {
          "field": {
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "SubjectGrant": {
        "required": [
          "resource",
          "scopes"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "minLength": 1,
            "type": "string"
          },
          "scopes": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "User": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "tenantId": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "format": "tel",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "id": {
            "minLength": 1,
            "type": "string"
          },
          "identities": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserIdentity"
            },
            "nullable": true
          },
          "picture": {
            "type": "string",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRole"
            },
            "nullable": true
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "UserIdentity": {
        "required": [
          "identityType",
          "provider",
          "userId"
        ],
        "type": "object",
        "properties": {
          "provider": {
            "minLength": 1,
            "type": "string"
          },
          "userId": {
            "minLength": 1,
            "type": "string"
          },
          "namespace": {
            "type": "string",
            "nullable": true
          },
          "identityType": {
            "$ref": "#/components/schemas/UserIdentityType"
          }
        }
      },
      "UserIdentityType": {
        "enum": [
          "unknown",
          "managed",
          "social"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "UserIdentityType",
          "modelAsString": true
        }
      },
      "UserRole": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          }
        }
      },
      "ValidationProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": { }
      },
      "WebFilterOperator": {
        "enum": [
          "eq",
          "ne",
          "gt",
          "gte",
          "lt",
          "lte",
          "between",
          "contains",
          "startsWith",
          "endsWith"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "WebFilterOperator",
          "modelAsString": true
        }
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://deveel.eu.auth0.com/oauth/token",
            "scopes": {
              "create:account": "Register a new account",
              "create:tenant": "Create new Tenants",
              "update:tenant": "Update information of existing Tenants",
              "read:tenant": "Read access to the Tenant information",
              "delete:tenant": "Delete existing tenants",
              "create:user": "Create new users within a Tenant",
              "read:user": "Read access to user information",
              "update:user": "Update user information",
              "delete:user": "Delete existing users",
              "invite:user": "Invite an individual to subscribe",
              "create:client": "Create new client applications",
              "delete:client": "Delete existing client applications",
              "update:client": "Update the information of existing client applications",
              "read:client": "Read access to client applications",
              "read:client_credentials": "Read access to the credentials of client applications"
            }
          },
          "authorizationCode": {
            "authorizationUrl": "https://deveel.eu.auth0.com/authorize",
            "tokenUrl": "https://deveel.eu.auth0.com/oauth/token",
            "scopes": {
              "create:account": "Register a new account",
              "create:tenant": "Create new Tenants",
              "update:tenant": "Update information of existing Tenants",
              "read:tenant": "Read access to the Tenant information",
              "delete:tenant": "Delete existing tenants",
              "create:user": "Create new users within a Tenant",
              "read:user": "Read access to user information",
              "update:user": "Update user information",
              "delete:user": "Delete existing users",
              "invite:user": "Invite an individual to subscribe",
              "create:client": "Create new client applications",
              "delete:client": "Delete existing client applications",
              "update:client": "Update the information of existing client applications",
              "read:client": "Read access to client applications",
              "read:client_credentials": "Read access to the credentials of client applications"
            }
          }
        }
      },
      "apiKey": {
        "type": "apiKey",
        "name": "X-API-KEY",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "oauth2": [
        "create:account",
        "create:tenant",
        "update:tenant",
        "read:tenant",
        "delete:tenant",
        "create:user",
        "read:user",
        "update:user",
        "delete:user",
        "invite:user",
        "create:client",
        "delete:client",
        "update:client",
        "read:client",
        "read:client_credentials"
      ]
    },
    {
      "apiKey": [ ]
    }
  ]
}